# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  # config.vm.box_url = "http://domain.com/path/to/above.box"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
  # end
  #
  # View the documentation for the provider you're using for more
  # information on available options.
  config.vm.provider "virtualbox" do |v|
     v.memory = 2048
     v.cpus = 2
   end
   config.vm.provision "file", source: "id_rsa", destination: "/home/vagrant/.ssh/id_rsa"
   config.vm.provision "file", source: "known_hosts", destination: "/home/vagrant/.ssh/known_hosts"
   config.vm.provision "file", source: "hosts", destination: "/home/vagrant/hosts"
   config.vm.provision "shell", inline: "mv /home/vagrant/hosts /etc/hosts"
   config.vm.provision "shell", privileged: false, inline: "chmod 400 /home/vagrant/.ssh/id_rsa"
   config.vm.provision "shell", inline: "wget -q --no-cookies --no-check-certificate --header 'Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie' 'http://download.oracle.com/otn-pub/java/jdk/7u51-b13/jdk-7u51-linux-x64.rpm' -O /tmp/jdk.rpm"
   config.vm.provision "shell", inline: "sudo yum -y localinstall /tmp/jdk.rpm"
 
  config.vm.define "nc3" do |nc|
	nc.vm.box = "chef/centos-6.5"
	nc.vm.hostname = "nc3"
	nc.vm.network "private_network", ip: "10.10.0.5"
  end
  config.vm.define "nc2" do |nc|
	nc.vm.box = "chef/centos-6.5"
	nc.vm.hostname = "nc2"
	nc.vm.network "private_network", ip: "10.10.0.4"
  end
  config.vm.define "nc1" do |nc|
	nc.vm.box = "chef/centos-6.5"
	nc.vm.hostname = "nc1"
	nc.vm.network "private_network", ip: "10.10.0.3"
  end

  config.vm.define "cc" do |cc|
	cc.vm.box = "chef/centos-6.5"
	cc.vm.hostname = "cc"
	cc.vm.network "private_network", ip: "10.10.0.2"
#	cc.vm.provision "file", source: "/home/imaxon/Work/asterixdb-vm/asterix-installer-0.8.5-binary-assembly.zip", destination: "/tmp/asterix.zip"
#	cc.vm.provision "shell", privileged: false, inline: "unzip /tmp/asterix.zip -d /tmp/asterix-0.8.5-binary-assembly"
#	cc.vm.provision "file", source: "cluster.xml", destination: "/tmp/cluster.xml"
#	$asterix_setup = 
#<<SCRIPT
#	su vagrant
#	export MANAGIX_HOME=/tmp/asterix-0.8.5-binary-assembly
#	$MANAGIX_HOME/bin/managix configure
#	$MANAGIX_HOME/bin/managix validate
#	$MANAGIX_HOME/bin/managix create -n vagrant_asterix -c /tmp/cluster.xml
#SCRIPT
#	cc.vm.provision "shell", privileged: false, inline: $asterix_setup
  end
  

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file chef/centos-6.5.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # # group { "puppet":
  # #   ensure => "present",
  # # }
  # #
  # # File { owner => 0, group => 0, mode => 0644 }
  # #
  # # file { '/etc/motd':
  # #   content => "Welcome to your Vagrant-built virtual machine!
  # #               Managed by Puppet.\n"
  # # }
  #
  # config.vm.provision "puppet" do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "site.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision "chef_solo" do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision "chef_client" do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end
