DataverseUse test
Query:
RecordConstructor [
  (
    LiteralExpr [STRING] [var]
    :
    (
      Let Variable [ Name=$i8 ]
        :=
        FunctionCall asterix.var@1[
          OrderedListConstructor [
            FunctionCall test.int8@1[
              LiteralExpr [STRING] [1]
            ]
            FunctionCall test.int8@1[
              LiteralExpr [STRING] [2]
            ]
            FunctionCall test.int8@1[
              LiteralExpr [STRING] [3]
            ]
          ]
        ]
      Let Variable [ Name=$i16 ]
        :=
        FunctionCall asterix.var@1[
          OrderedListConstructor [
            FunctionCall test.int16@1[
              LiteralExpr [STRING] [1]
            ]
            FunctionCall test.int16@1[
              LiteralExpr [STRING] [2]
            ]
            FunctionCall test.int16@1[
              LiteralExpr [STRING] [3]
            ]
          ]
        ]
      Let Variable [ Name=$i32 ]
        :=
        FunctionCall asterix.var@1[
          OrderedListConstructor [
            FunctionCall test.int32@1[
              LiteralExpr [STRING] [1]
            ]
            FunctionCall test.int32@1[
              LiteralExpr [STRING] [2]
            ]
            FunctionCall test.int32@1[
              LiteralExpr [STRING] [3]
            ]
          ]
        ]
      Let Variable [ Name=$i64 ]
        :=
        FunctionCall asterix.var@1[
          OrderedListConstructor [
            FunctionCall test.int64@1[
              LiteralExpr [STRING] [1]
            ]
            FunctionCall test.int64@1[
              LiteralExpr [STRING] [2]
            ]
            FunctionCall test.int64@1[
              LiteralExpr [STRING] [3]
            ]
          ]
        ]
      Let Variable [ Name=$f ]
        :=
        FunctionCall asterix.var@1[
          OrderedListConstructor [
            FunctionCall test.float@1[
              LiteralExpr [STRING] [1]
            ]
            FunctionCall test.float@1[
              LiteralExpr [STRING] [2]
            ]
            FunctionCall test.float@1[
              LiteralExpr [STRING] [3]
            ]
          ]
        ]
      Let Variable [ Name=$d ]
        :=
        FunctionCall asterix.var@1[
          OrderedListConstructor [
            FunctionCall test.double@1[
              LiteralExpr [STRING] [1]
            ]
            FunctionCall test.double@1[
              LiteralExpr [STRING] [2]
            ]
            FunctionCall test.double@1[
              LiteralExpr [STRING] [3]
            ]
          ]
        ]
      SELECT ELEMENT [
      Variable [ Name=$i ]
      ]
      FROM [        OrderedListConstructor [
          Variable [ Name=$i8 ]
          Variable [ Name=$i16 ]
          Variable [ Name=$i32 ]
          Variable [ Name=$i64 ]
          Variable [ Name=$f ]
          Variable [ Name=$d ]
        ]
        AS Variable [ Name=$i ]
      ]
    )
  )
  (
    LiteralExpr [STRING] [var_pop]
    :
    (
      Let Variable [ Name=$i8 ]
        :=
        FunctionCall asterix.var_pop@1[
          OrderedListConstructor [
            FunctionCall test.int8@1[
              LiteralExpr [STRING] [1]
            ]
            FunctionCall test.int8@1[
              LiteralExpr [STRING] [2]
            ]
            FunctionCall test.int8@1[
              LiteralExpr [STRING] [3]
            ]
          ]
        ]
      Let Variable [ Name=$i16 ]
        :=
        FunctionCall asterix.var_pop@1[
          OrderedListConstructor [
            FunctionCall test.int16@1[
              LiteralExpr [STRING] [1]
            ]
            FunctionCall test.int16@1[
              LiteralExpr [STRING] [2]
            ]
            FunctionCall test.int16@1[
              LiteralExpr [STRING] [3]
            ]
          ]
        ]
      Let Variable [ Name=$i32 ]
        :=
        FunctionCall asterix.var_pop@1[
          OrderedListConstructor [
            FunctionCall test.int32@1[
              LiteralExpr [STRING] [1]
            ]
            FunctionCall test.int32@1[
              LiteralExpr [STRING] [2]
            ]
            FunctionCall test.int32@1[
              LiteralExpr [STRING] [3]
            ]
          ]
        ]
      Let Variable [ Name=$i64 ]
        :=
        FunctionCall asterix.var_pop@1[
          OrderedListConstructor [
            FunctionCall test.int64@1[
              LiteralExpr [STRING] [1]
            ]
            FunctionCall test.int64@1[
              LiteralExpr [STRING] [2]
            ]
            FunctionCall test.int64@1[
              LiteralExpr [STRING] [3]
            ]
          ]
        ]
      Let Variable [ Name=$f ]
        :=
        FunctionCall asterix.var_pop@1[
          OrderedListConstructor [
            FunctionCall test.float@1[
              LiteralExpr [STRING] [1]
            ]
            FunctionCall test.float@1[
              LiteralExpr [STRING] [2]
            ]
            FunctionCall test.float@1[
              LiteralExpr [STRING] [3]
            ]
          ]
        ]
      Let Variable [ Name=$d ]
        :=
        FunctionCall asterix.var_pop@1[
          OrderedListConstructor [
            FunctionCall test.double@1[
              LiteralExpr [STRING] [1]
            ]
            FunctionCall test.double@1[
              LiteralExpr [STRING] [2]
            ]
            FunctionCall test.double@1[
              LiteralExpr [STRING] [3]
            ]
          ]
        ]
      SELECT ELEMENT [
      Variable [ Name=$i ]
      ]
      FROM [        OrderedListConstructor [
          Variable [ Name=$i8 ]
          Variable [ Name=$i16 ]
          Variable [ Name=$i32 ]
          Variable [ Name=$i64 ]
          Variable [ Name=$f ]
          Variable [ Name=$d ]
        ]
        AS Variable [ Name=$i ]
      ]
    )
  )
]
